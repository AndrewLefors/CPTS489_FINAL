var express = require("express");
var router = express.Router();
const { body, validationResult } = require("express-validator");
const Course = require("../models/Course");

/* Validators */
//TODO: THis is where you need to implement your custom validators
//first copy then modify validators to start with known working example
//
//We have this function so that names are associated with the autogenerated ID for the user details page
const firstnameValidator = async (value) => {
  if (value.startsWith(" ")) {
    throw new Error("Error: First Name Field cannot be Blank");
  }
};
const lastnameValidator = async (value) => {
  if (value.startsWith(" ")) {
    throw new Error("Error: Last Name Field cannot be Blank");
  }
};
const ageValidator = async (value, { req }) => {
  if (value < 18)
  {
    throw new Error("Error: Minimum Age is 18");
  }
};

const salaryValidator = async (value, { req }) => {
  if (value < 0)
  {
    throw new Error("Error: Minimum Salary is 0");
  }
};

router.get("/", async function (req, res, next) {
  const courses = await Course.findAll();
  if (req.query.msg) {
    res.locals.msg = req.query.msg;
  }
  res.render("courses", { courses });
});

router.post(
  "/create",
  //TODO: This is where you will be using your custom validators
  body("firstname").custom(firstnameValidator),
  body("lastname").custom(lastnameValidator),
  body("age").custom(ageValidator),
  body("salary").custom(salaryValidator),
  
  async function (req, res, next) {
    try {
      const result = validationResult(req);
      const result2 = result.formatWith((error) => error.msg);
      const errors2 = result2.array();
      console.log(errors2);
      if (!result.isEmpty()) {
        throw new Error(errors2[0]);
      } else {
        await Course.create({
          firstname: req.body.firstname,
          lastname: req.body.lastname,
          gender: req.body.gender,
          age: req.body.age,
          position: req.body.position,
          salary: req.body.salary,
          department: req.body.department,
          joindate: new Date().setHours(0,0,0,0)
        });
        res.redirect("/?msg=success");
      }
    } catch (error) {
      res.redirect("/?msg=" + new URLSearchParams(error.toString()).toString());
    }
  }
);

/*
ORIGINAL router.post:
router.post(
  "/create",
  //TODO: This is where you will be using your custom validators
  body("courseid").custom(courseidValidator),
  body("enrollnum").custom(enrollnumValidator),
  async function (req, res, next) {
    try {
      const result = validationResult(req);
      const result2 = result.formatWith((error) => error.msg);
      const errors2 = result2.array();
      console.log(errors2);
      if (!result.isEmpty()) {
        throw new Error(errors2[0]);
      } else {
        await Course.create({
          courseid: req.body.firstname,
          coursename: req.body.coursename,
          semester: req.body.semester,
          coursedesc: req.body.coursedesc,
          enrollnum: req.body.enrollnum,
        });
        res.redirect("/?msg=success");
      }
    } catch (error) {
      res.redirect("/?msg=" + new URLSearchParams(error.toString()).toString());
    }
  }
);
*/
//TODO: Modify this to display Whatever is required as record page
//IF Course name does not change then no need to alter this part
//except the message itself can be updated
router.get("/:recordid", async function (req, res, next) {
  const course = await Course.findCourse(req.params.recordid);
  if (course) {
    res.render("coursedetails", { course });
  } else {
    res.redirect("/?msg=course+not+found");
  }
});

module.exports = router;
